"""
Дэк - двунаправленная очередь
Она очень быстро вставляет и берет элементы с обеих концов

ВАЖНО! У СПИСКА ВСТАВКА В НАЧАЛО - ОЧЕНЬ ДОЛГО,Т.К. ТАМ ПРОИСХОДИТ
СДВИГ ВСЕХ ЭЛЕМЕНТОВ, А ДЭК РАБОТАЕТ СО ССЫЛКАМИ

Пример использования:
В дэк падают новости, и мы хотим, чтобы высвечивались только самые свежие

ДЭК ПОТОКОБЕЗОПАСЕН!
Это значит, что два разных потока НИКОГДА НЕ ВОЗЬМУТ один и тот же элемент
или не попытаются записать один и тот же элемент.
Пример из многопоточных приложений:
ПАТТЕРН "ПРОДЮСЕР - КОНСЬЮМЕР"
Например, вы пишите парсер. Есть неск-ко продюсеров.
Продюсер берет главную страницу какого-то сайта, собирает с нее ссылки и
кидает в эту очередь (дэку), а 10 др потоков стоят в очереди, достают
из дэки эти ссылки и, например, проверяют что они живые: кидают туда запрос и
проверяют что возвращается код 200
Благодаря дэке это можно реализовать...
Еще раз, дэк потокобезопасен. Потоки с ним хорошо работают и не будут конфликтовать,
они будут брать данные корректно

ЗАДАЧА:
В ЧЕМ ПЛЮСЫ СПИСКА ПО СРАВНЕНИЮ С ДЭКОМ?
"""

from collections import deque

a_deque = deque([5, 5, 5, 5])
b_deque = deque([9, 9, 9], maxlen=3)

if __name__ == '__main__':

    print("\n=== Базовые возможности deque")
    a_deque.append(1)
    print(a_deque)
    a_deque.appendleft(2)
    print(a_deque)
    a_deque.pop()
    print(a_deque)
    a_deque.popleft()
    print(a_deque)

    print("\n=== deque(maxlen=) позволяет вытеснять элемент с др конца")
    print(b_deque)
    b_deque.append(0)
    print(b_deque)

    print("\n=== Читаем файл и оставляем последние 2 строки")
    # Каждая новая добавленная строка, будет выталкивать одну из предыдущих
    with open('files\points.csv') as file:
        a_deque = deque(file, maxlen=2)
    for line in a_deque:
        print(line.rstrip())
